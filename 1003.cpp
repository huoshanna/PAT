///*
// 1. 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；
// 2. 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；
// 3. 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。
// 
// 现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。
// 输入格式： 每个测试输入包含1个测试用例。第1行给出一个自然数n (<10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。
// 
// 输出格式：每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。
// 
//*/
//#include <map>
//#include <iostream>
//using namespace std;
//
//int main(){
//    int n;
//    cin>>n;
//    string s;
//    int t=0;//存放P前A个数
//    int k=0;//存放PT之间A个数
//    for (int i = 0; i < n; i++) {
//        cin>>s;
//        map<char,int> m;
//        for (int j=0; j<s.size(); j++) {
//                m[s[j]]++;
//                if (s[j] == 'P') t = j;
//                if (s[j] == 'T') k = j;
//        }
//        if (m.size() == 3 && m['P'] == 1 && m['T'] == 1 && m['A'] != 0 && (k-t-1) * t == (s.size()-k-1))
//            cout<<"YES"<<endl;
//        else
//            cout<<"NO"<<endl;
//    }
//    return 0;
//}

